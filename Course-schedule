class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        degree = [0] * numCourses
        graph = defaultdict(list)

        for i, j in prerequisites:
            graph[j].append(i)
            degree[i] += 1

        q = deque()
        for i in range(numCourses):
                if degree[i] == 0:
                    q.append(i)
        order = []
        while q:
            num = q.popleft()
            order.append(num)
        
            for child in graph[num]:
                degree[child] -= 1
        
                if degree[child] == 0:
                    q.append(child)

        return len(order) == numCourses 

                

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def averageOfSubtree(self, root: Optional[TreeNode]) -> int:
        count = 0

        def helper(node):
            if not node:
                return [0, 0]

            left = helper(node.left)
            right = helper(node.right)

            nonlocal count

            if node.val == (node.val + left[0] + right[0]) // (1 + left[1] + right[1]):
                count += 1

            return [node.val + left[0] + right[0], 1 + left[1] + right[1]]

        helper(root)
        return count

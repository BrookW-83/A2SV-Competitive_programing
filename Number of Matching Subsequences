class Solution:
    def numMatchingSubseq(self, s: str, words: List[str]) -> int:
        t = Trie()
        for char in words:
            t.insert(char)
        return t.search(s)
            

class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end = False
        self.count = 0

class Trie:
    def __init__(self):
        self.root = TrieNode()

    def insert(self, word:str) -> None:
        trie = self.root

        for char in word:
            if char not in trie.children:
                trie.children[char] = TrieNode()
            trie = trie.children[char]

        trie.is_end = True
        trie.count += 1

    def search(self, word): 
        currTrie = self.root
        res = 0

        def dfs(index, node):
            nonlocal res

            for char in node.children:
                for j in range(index, len(word)):
                    if char == word[j]:
                        res += node.children[char].count
                        dfs(j + 1, node.children[char])
                        break

        dfs(0, currTrie)
        return res

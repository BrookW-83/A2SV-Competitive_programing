# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def flipEquiv(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:

        return self.dfs(root1, root2)

    def dfs(self, node1, node2):
        if not node1 and not node2:
            return True


        if not(node1 and node2) or node1.val != node2.val:
            return False

        if (node1.left and node2.left)  or (node1.right and node2.right):
            traverse1 = self.dfs(node1.left, node2.left) and self.dfs(node1.right, node2.right)
            traverse2 = self.dfs(node1.left, node2.right) and self.dfs(node1.right, node2.left)
            return traverse1 or traverse2

        else:
            traverse1 = self.dfs(node1.left, node2.right)
            
            traverse2 = self.dfs(node1.right, node2.left)

            return traverse1 and traverse2

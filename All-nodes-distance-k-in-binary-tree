# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def distanceK(self, root: TreeNode, target: TreeNode, k: int) -> List[int]:
        graph = defaultdict(list)

        def dfs(node):
            if node.left:
                graph[node.val].append(node.left.val)
                graph[node.left.val].append(node.val)
            if node.right:
                graph[node.val].append(node.right.val)
                graph[node.right.val].append(node.val)

            if node.left:
                dfs(node.left)
            if node.right:
                dfs(node.right)
        dfs(root)

        q = deque()
        q.append((target.val, 0))
        visited = set()
        visited.add(target.val)

        res = []
        while q:
            for i in range(len(q)):
                n, d = q.popleft()
                if d == k:
                    res.append(n)

                for child in graph[n]:
                    if child not in visited:
                        visited.add(child)
                        q.append((child, d + 1))

                if d > k:
                    break

        return res

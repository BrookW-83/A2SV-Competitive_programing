class Solution:
    def openLock(self, deadends: List[str], target: str) -> int:
        if '0000' in deadends:
            return -1

        q = deque()
        q.append(['0000', 0])
        visited = set(deadends)

        def paths(strs):
            res = []
            for i in range(4):
                num = str((int(lock[i]) + 1 )% 10)
                res.append(lock[:i] + num + lock[i + 1:])
                num = str((int(lock[i]) - 1 + 10 )% 10)
                res.append(lock[:i] + num + lock[i + 1:])

            return res

        while q:
            lock, turn = q.popleft()

            if lock == target:
                return turn

            for path in paths(lock):
                if path not in visited:
                    visited.add(path)
                    q.append([path, turn +1 ])

        return -1

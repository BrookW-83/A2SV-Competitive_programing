class Solution:
    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:
        parent = {}
        if source == destination:
            return True

        size = []
        for i in range(n):
            size.append(1)
            parent[i] = i

        def find(x):

            if parent[x] != x:
                parent[x] = find(parent[x])
            
            return parent[x]

        def union(x, y):
            val1 = find(x)
            val2 = find(y)

            if val1 == val2:
                return 
            if size[val1] >= size[val2]:
                parent[val2] = val1
                size[val1] += size[val2]
            else:
                parent[val1] = val2
                size[val2] += size[val1]

        for e1, e2 in edges:
            union(e1, e2)
            
        return find(source) == find(destination)
        

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> List[List[int]]:
        if not root:
            return None

        res = []
        path = collections.deque()
        def dfs(node, currSum):
            path.append(node.val)
            currSum += node.val

            if (not node.left) and (not node.right) and currSum == targetSum:
                return res.append(list(path))

            if node.left:
                dfs(node.left, currSum)
            
            if node.right:
                dfs(node.right, currSum)
            
            currSum -= node.val
            path.pop()

        dfs(root, 0)
        return res
        

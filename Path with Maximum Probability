class Solution:
    def maxProbability(self, n: int, edges: List[List[int]], succProb: List[float], start_node: int, end_node: int) -> float:

        graph = defaultdict(list)
        for index, edge in enumerate(edges):
            e1, e2 = edge
            graph[e1].append((e2,succProb[index]))
            graph[e2].append((e1,succProb[index]))
    
        minHeap = []
        heappush(minHeap, (-1, start_node))
        res = [0] * n
        res[start_node] = 1

        while minHeap:
            prob, node = heappop(minHeap)
            prob *= -1

            if node == end_node:
                return prob

            if prob < res[node]:
                continue

            for child, val in graph[node]:
                new_prob = prob * val
                if new_prob > res[child]:
                    res[child] = new_prob
                    heappush(minHeap, (-new_prob, child))


        return 0

        

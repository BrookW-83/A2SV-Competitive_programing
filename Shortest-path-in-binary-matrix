class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        if grid[0][0] != 0:
            return -1

        n = len(grid[0])
        directions = [(0,1),(1,0),(1,1),(-1,-1),(-1,0),(0,-1),(-1,1),(1,-1)] 
        
        q = deque()
        q.append((0,0,1))
        step = float("inf")
        grid[0][0] = 1

        while q:
            row, col, path = q.popleft()
            
            if (row,col) == (n-1,n-1):
                step = min(step, path)
                continue
            
            for i,j in directions:
                new_row = row + i
                new_col = row + j

                if 0 <= new_row < n and 0 <= new_col < n and grid[new_row][new_col] == 0:
                    q.append((new_row,new_col,path+1))
                    grid[new_col][new_col] = 1
        

        return step if step != float("inf") else -1

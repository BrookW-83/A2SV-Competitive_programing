class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        n = len(grid[0])
        directions = [(0,1),(1,0),(1,1),(-1,-1),(-1,0),(0,-1),(-1,1),(1,-1)] 

        if grid[0][0] != 0:
            return -1
        
        q = deque()
        q.append((0,0,1))

        step = float("inf")
        visited = set()
        visited.add((0, 0))

        while q:
            row, col, path = q.popleft()
            
            if (row,col) == (n-1,n-1): 
                step = min(step, path)
                continue
            
            for i,j in directions:
                new_row = row + i 
                new_col = col + j

                if(0<= new_row < n and 0 <= new_col < n and grid[new_row][new_col] == 0 and (new_row, new_col) not in visited):
                    visited.add((new_row, new_col))
                    q.append((new_row,new_col,path+1))
                    
        
        return step if step != float("inf") else -1

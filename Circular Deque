class MyCircularDeque:

    def __init__(self, k: int):
       self.maxSize = k
       self.size = 0

       self.circular_deque = [0] * k
       self.end = 0
       self.start = k -1
        

    def insertFront(self, value: int) -> bool:
        if self.size + 1 <= self.maxSize:
            self.circular_deque[self.start] = value
            self.start = (self.start - 1) % self.maxSize
            self.size += 1

            return True

        else:
            return False


    def insertLast(self, value: int) -> bool:
        if self.size + 1 <= self.maxSize:

            self.circular_deque[self.end] = value
            self.end = (self.end + 1) % self.maxSize
            self.size += 1

            return True

        else:
            return False
        

    def deleteFront(self) -> bool:
        if self.size != 0:
            self.start = (self.start + 1) % self.maxSize
            self.size -= 1
            return True
        else:
            return False
        

    def deleteLast(self) -> bool:
        if self.size != 0:
            self.end = (self.end - 1) % self.maxSize
            self.size -= 1
            return True
        else:
            return False
        

    def getFront(self) -> int:
        if self.size != 0:
            return self.circular_deque[(self.start + 1)% self.maxSize]
        else:
            return -1
        

    def getRear(self) -> int:
        if self.size != 0:
            return self.circular_deque[(self.end - 1) % self.maxSize]
        else:
            return -1     

    def isEmpty(self) -> bool:
        return self.size == 0
           
    def isFull(self) -> bool:
        return self.size == self.maxSize
            

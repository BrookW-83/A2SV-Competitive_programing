class Solution:
    def countSubIslands(self, grid1: List[List[int]], grid2: List[List[int]]) -> int:
        direction = [(1, 0), (-1, 0), (0, 1), (0, -1)]

        inBound = lambda row, col : 0 <= row < len(grid2) and 0 <= col < len(grid2[0])

        visited = set()
        arr = []

        def dfs(row, col, arr):
            arr.append((row, col))

            visited.add((row, col))

            for i, j in direction:
                new_row = row + i
                new_col = col + j
                if inBound(new_row, new_col) and grid2[new_row][new_col] == 1 and (new_row,new_col) not in visited:
                    dfs(new_row, new_col, arr)
                
            return arr
        

            
        for row in range(len(grid2)):
            for col in range(len(grid2[0])):
                if grid2[row][col] == 1 and (row, col) not in visited:   
                    arr.append(dfs(row, col,[]))

        print(arr)

        
        sub_island = 0
        for island in arr:
            count = 0
            for row, col in island:
                if grid1[row][col] == 1:
                    count += 1
            if count == len(island):
                sub_island += 1
            
                
        return sub_island


        

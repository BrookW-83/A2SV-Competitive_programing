# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def pairSum(self, head: Optional[ListNode]) -> int:
        
        def reverseList(node):
            curr, prev = node, None

            while curr:
                nxt = curr.next
                curr.next = prev
                prev = curr
                curr = nxt
            return prev

        slow, fast = head, head
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next

        secondHead = reverseList(slow)
        MaxSum = 0

        while secondHead:
            CurrSum = (head.val + secondHead.val)
            MaxSum = max(MaxSum, CurrSum)
            secondHead = secondHead.next
            head =  head.next

        return MaxSum

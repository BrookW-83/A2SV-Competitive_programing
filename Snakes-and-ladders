class Solution:
    def snakesAndLadders(self, board: List[List[int]]) -> int:
        n = len(board)
        board.reverse()
        print(board)
        def findPosition(x):
            row = (x - 1) // n
            col = (x -1) % n
            if row % 2:
                col = (n - 1 - col)

            return [row, col]


        q = deque()
        q.append([1, 0])
        visited = set()
        while q:
            p1, moves = q.popleft()

            for i in range(1, 7):
                p2 = p1 + i
                row, col = findPosition(p2)
                print(row, col)
                if board[row][col] != -1:
                    p2 = board[row][col]
                if board[row][col] == (n * n):
                    return moves+1
                if p2 not in visited:
                    visited.add(p2)
                    q.append([p2, moves + 1])

        return -1
